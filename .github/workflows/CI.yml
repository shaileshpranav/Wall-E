name: Ubuntu 20.04 Noetic ros_comm

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      ROS_CI_DESKTOP: "`lsb_release -cs`"  # e.g. [trusty|xenial|...]
      ROS_DISTRO: noetic
    steps:
      - name: ros_comm
        uses: actions/checkout@v2
        with:
          path: catkin_ws/src/ros_comm
      - name: Configure ROS for install
        run: |
          sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
          sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
          sudo apt-get update -qq
          # sudo apt-get install dpkg
          # sudo apt-get install -y gfortran
          # sudo apt-get install -y libatlas-base-dev
          # sudo apt-get install -y libblas-dev
          # sudo apt-get install -y libboost-dev
          # sudo apt-get install -y libboost-signals-dev
          # sudo apt-get install -y libbullet-dev
          # sudo apt-get install -y libceres-dev
          # sudo apt-get install -y libeigen3-dev
          # sudo apt-get install -y liblapack-dev
          # sudo apt-get install -y libpng++-dev
          # sudo apt-get install -y libsdl2-dev
          # sudo apt-get install -y libv4l-dev
          # sudo apt-get install -y libyaml-cpp-dev
          # sudo apt-get install -y qt5-default
      - name: Install ROS base packages
        run: |
          sudo apt-get install -y python3-catkin-pkg
          sudo apt-get install -y python3-catkin-tools
          sudo apt-get install -y python3-rosdep
          sudo apt-get install -y python3-wstool
          sudo apt-get install -y python3-osrf-pycommon
          sudo apt-get install -y ros-cmake-modules
          sudo apt-get install -y ros-$ROS_DISTRO-catkin  # provides setup.bash
      - name: Install ROS packages with rosdep
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          sudo rosdep init
          rosdep update
          mkdir -p ~/catkin_ws/src
          cd ~/catkin_ws/src
          ln -s ~/work  # $CI_SOURCE_PATH
          ls work/Wall-E/Wall-E
          cd ..
          rosdep install --from-paths src --ignore-src -r -s  # do a dry-run first
          rosdep install --from-paths src --ignore-src -r -y
          sudo apt-get install -y libgazebo9-dev
      - name: Additional dependencies
        run: |
          sudo apt install ros-$ROS_DISTRO-turtlebot3
          sudo apt install ros-$ROS_DISTRO-turtlebot3-bringup
          sudo apt install ros-$ROS_DISTRO-turtlebot3-description
          sudo apt install ros-$ROS_DISTRO-turtlebot3-gazebo
          sudo apt install ros-$ROS_DISTRO-turtlebot3-msgs
          sudo apt install ros-$ROS_DISTRO-turtlebot3-navigation
          sudo apt install ros-$ROS_DISTRO-turtlebot3-simulations
          sudo apt install ros-$ROS_DISTRO-turtlebot3-slam
          sudo apt install ros-$ROS_DISTRO-move-base
          sudo apt install ros-$ROS_DISTRO-move-base-msgs
          sudo apt install ros-$ROS_DISTRO-aruco-detect
          sudo apt install ros-$ROS_DISTRO-tf
          sudo apt install ros-$ROS_DISTRO-tf2-ros
          sudo apt install ros-$ROS_DISTRO-actionlib
          sudo apt install ros-$ROS_DISTRO-actionlib-msgs
          sudo apt install ros-$ROS_DISTRO-amcl
          sudo apt install ros-$ROS_DISTRO-map-server
          sudo apt install ros-$ROS_DISTRO-navigation
          sudo apt-get install ros-$ROS_DISTRO-gazebo-ros-pkgs ros-$ROS_DISTRO-gazebo-msgs
          sudo apt install libgazebo9 gazebo9-common gazebo9-plugin-base
          sudo apt-get install libgazebo9-dev
          sudo apt install ros-noetic-moveit

          source /opt/ros/noetic/setup.bash
          rospack profile
          
      - name: Build Release
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          cd ~/catkin_ws
          catkin build
          source devel/setup.bash
          
#       - name: Build Tests
#         run: |
#           source /opt/ros/$ROS_DISTRO/setup.bash
#           cd ~/catkin_ws
#           #catkin_make tests
          
#           source devel/setup.bash
          
      - name: Run tests
        if: always()
        run: |
          sudo apt install -y lcov
          cd ~/catkin_ws
          source devel/setup.bash
          catkin config --cmake-args -DCMAKE_CXX_FLAGS="-Wall -Wno-unused --coverage -fno-inline -fno-inline-small-functions -fno-default-inline" -DCMAKE_C_FLAGS="-Wall -Wno-unused --coverage -fno-inline -fno-inline-small-functions -fno-default-inline" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-lgcov"
          catkin build
          catkin run_tests 
          # -i && catkin_test_results
        
      - name: Configure Codecov
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/opt/*' '/usr/*' '*/devel/*' '*_test*' --output-file coverage.info
          lcov --list coverage.info    
    
      - name: Upload result to Coveralls.io
        uses: coverallsapp/github-action@1.1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{github.workspace}}/build/coverage.info.cleaned
